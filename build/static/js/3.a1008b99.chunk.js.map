{"version":3,"sources":["components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","console","log","commentData","text","quoteId","className","classes","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","allComments","data","params","useParams","quoteID","pullComments","useCallback","commentCompleteHandler","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","loadedQuotes","path","exact","to","url"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,SAAW,6B,mBCA7BD,EAAOC,QAAU,CAAC,KAAO,6BAA6B,QAAU,gCAAgC,QAAU,gCAAgC,QAAU,kC,mBCApJD,EAAOC,QAAU,CAAC,KAAO,4B,mBCAzBD,EAAOC,QAAU,CAAC,SAAW,iC,mBCA7BD,EAAOC,QAAU,CAAC,MAAQ,kC,yICgDXC,EA1CQ,SAACC,GACtB,IAAMC,EAAiBC,mBACvB,EAAuCC,YAAQC,KAAvCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAQC,EAA7B,EAA6BA,MACrBC,EAAmBR,EAAnBQ,eAKRC,qBAAU,WACO,cAAXH,GAA2BC,GAC7BC,MAED,CAACF,EAAQC,EAAOC,IAEnB,IAAME,EAAoB,SAACC,GACzBA,EAAMC,iBAEN,IAAMC,EAAcZ,EAAea,QAAQC,MAC3CC,QAAQC,IAAI,cAAeJ,GAC3BR,EAAY,CACVa,YAAa,CAACC,KAAMN,GACpBO,QAASpB,EAAMoB,UAGjBJ,QAAQC,IAAI,gBAId,OACE,uBAAMI,UAAWC,IAAQC,KAAMC,SAAUd,EAAzC,UACc,YAAXJ,GAAwB,cAACmB,EAAA,EAAD,IACzB,sBAAKJ,UAAWC,IAAQI,QAASF,SAAUd,EAA3C,UACE,uBAAOiB,QAAQ,UAAf,0BACA,0BAAUC,GAAG,UAAUC,KAAK,IAAIC,IAAK7B,OAEvC,qBAAKoB,UAAWC,IAAQS,QAAxB,SACE,wBAAQV,UAAU,MAAlB,+B,iBCjCOW,EARK,SAAChC,GACnB,OACE,oBAAIqB,UAAWC,IAAQW,KAAvB,SACE,4BAAIjC,EAAMmB,U,iBCQDe,EAVM,SAAClC,GACpB,OACE,oBAAIqB,UAAWC,IAAQa,SAAvB,SACGnC,EAAMmC,SAASC,KAAI,SAACC,GAAD,OAClB,cAAC,EAAD,CAA8BlB,KAAMkB,EAAQlB,MAA1BkB,EAAQT,UCuEnBU,EArEE,WACf,MAA8CC,oBAAS,GAAvD,mBAAOC,EAAP,KAAwBC,EAAxB,KACA,EAA0DtC,YAAQuC,KAA1DrC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAcqC,EAAnC,EAA6BC,KACvBC,GADN,EAAgDtC,MACjCuC,eAIP1B,EAAYyB,EAAOE,QAAnB3B,QAERJ,QAAQC,IAAI,YAAa4B,GAEzB,IAAMG,EAAeC,uBAAY,WAC/B5C,EAAYe,KACX,CAACf,EAAae,IAEjBX,qBAAU,WACRuC,MACC,CAACA,IAEJhC,QAAQC,IAAI,cAAe0B,GAE3B,IAeIR,EAfEe,EAAyBD,uBAAY,WACzC5C,EAAYe,KAEX,CAACf,EAAae,IA2BjB,OAlBAJ,QAAQC,IAAI,iBAAkBX,GAKf,YAAXA,IACF6B,EAAW,oCAAM,cAACV,EAAA,EAAD,IAAN,QAGE,cAAXnB,IAA2BqC,GAAeA,EAAYQ,OAAS,KACjEhB,EAAW,cAAC,EAAD,CAAcA,SAAUQ,KAGtB,cAAXrC,GAA4BqC,GAAsC,IAAvBA,EAAYQ,SACzDhB,EAAW,8DAMX,0BAASd,UAAWC,IAAQa,SAA5B,UACE,gDACEK,GACA,wBAAQnB,UAAU,MAAM+B,QA9BC,WAC7BX,GAAmB,IA6Bf,2BAIDD,GAAmB,cAAC,EAAD,CAClBhC,eAAgB0C,EAChB9B,QAASA,IAEVe,M,iBC9DQkB,EATU,SAACrD,GACxB,OACE,yBAAQqB,UAAWC,IAAQgC,MAA3B,UACE,4BAAItD,EAAMmB,OACV,qCAAanB,EAAMuD,aC8DVC,UA5DK,WAGhB,IAAMC,EAAQC,cAINX,EAHOD,cAGPC,QAER,EAA2D5C,YAAQwD,KAAgB,GAA3EtD,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,OAAqBsD,GAA1C,EAA6BrD,MAA7B,EAAoCqC,MAQpC,OALAnC,qBAAU,WACNJ,EAAY0C,KAEb,CAAC1C,EAAa0C,IAEF,YAAXzC,EAEI,qBAAKe,UAAU,GAAf,SACI,cAACI,EAAA,EAAD,MAQPmC,EAAazC,KAWd,gCAEI,cAAC,EAAD,CAAkBA,KAAMyC,EAAazC,KAAMoC,OAAQK,EAAaL,SAEhE,cAAC,IAAD,CAAOM,KAAI,UAAKJ,EAAMI,MAAQC,OAAK,EAAnC,SACI,qBAAKzC,UAAU,WAAf,SAEI,cAAC,IAAD,CAAM0C,GAAE,UAAKN,EAAMO,IAAX,aAA2B3C,UAAU,YAA7C,+BAOR,cAAC,IAAD,CAAOwC,KAAI,UAAKJ,EAAMI,KAAX,aAAX,SACI,cAAC,EAAD,SAxBJ","file":"static/js/3.a1008b99.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http'\nimport { addComment } from '../../lib/api'\n\nimport classes from './NewCommentForm.module.css';\nimport LoadingSpinner from '../UI/LoadingSpinner'\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n  const { sendRequest, status, error } = useHttp(addComment)\n  const { onAddedComment } = props\n\n\n\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment()\n    }\n  }, [status, error, onAddedComment])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value\n    console.log(\"enteredText\", enteredText)\n    sendRequest({\n      commentData: {text: enteredText },\n      quoteId: props.quoteId\n    })\n\n    console.log(\"formComment\")\n\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && <LoadingSpinner />}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { getAllComments } from '../../lib/api'\nimport { useParams } from 'react-router-dom'\nimport useHttp from '../../hooks/use-http'\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport LoadingSpinner from '../UI/LoadingSpinner'\nimport CommentsList from '../comments/CommentsList'\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { sendRequest, status, data: allComments, error } = useHttp(getAllComments)\n  const params = useParams()\n\n\n\n  const { quoteId } = params.quoteID\n\n  console.log(\"paramsObj\", params)\n\n  const pullComments = useCallback(() => {\n    sendRequest(quoteId)\n  }, [sendRequest, quoteId]\n  )\n  useEffect(() => {\n    pullComments()\n  }, [pullComments])\n\n  console.log(\"allComments\", allComments)\n\n  const commentCompleteHandler = useCallback(() => {\n    sendRequest(quoteId)\n\n  }, [sendRequest, quoteId])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  // const addedCommentHandler = useCallback(() => {\n\n  // }, [])\n\n  console.log(\"LoadingSpinner\", status)\n\n\n  let comments\n\n  if (status === \"pending\") {\n    comments = <div> <LoadingSpinner /> </div>\n  }\n\n  if (status === \"completed\" && (allComments || allComments.length > 0)) {\n    comments = <CommentsList comments={allComments} />\n  }\n\n  if (status === \"completed\" && (!allComments || allComments.length === 0)) {\n    comments = <p> No comments were added yet </p>\n  }\n\n\n  return (\n\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm\n        onAddedComment={commentCompleteHandler}\n        quoteId={quoteId}\n      />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from 'react'\r\nimport { useParams, Route, Link, useRouteMatch } from 'react-router-dom'\r\nimport Comments from '../components/comments/Comments'\r\nimport HighlightedQuote from '../components/quotes/HighlightedQuote'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getSingleQuote } from '../lib/api'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\n\r\nconst QuoteDetail = () => {\r\n\r\n\r\n    const match = useRouteMatch()\r\n    const params = useParams()\r\n\r\n \r\n    const { quoteID } = params\r\n  \r\n    const { sendRequest, status, error, data: loadedQuotes } = useHttp(getSingleQuote, true)\r\n\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteID)\r\n     \r\n    }, [sendRequest, quoteID])\r\n\r\n    if (status === \"pending\") {\r\n        return (\r\n            <div className=\"\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n    if (status === \"error\") {\r\n        <p>{error}</p>\r\n\r\n    }\r\n    if (!loadedQuotes.text) {\r\n        return (\r\n            <p>\r\n                No quote found\r\n            </p>\r\n        )\r\n\r\n    }\r\n\r\n    \r\n    return (\r\n        <div>\r\n\r\n            <HighlightedQuote text={loadedQuotes.text} author={loadedQuotes.author} />\r\n   \r\n            <Route path={`${match.path}`} exact>\r\n                <div className=\"centered\">\r\n\r\n                    <Link to={`${match.url}/comments`} className=\"btn--flat\" >\r\n                        Load Comments\r\n                    </Link>\r\n                </div>\r\n            </Route>\r\n\r\n\r\n            <Route path={`${match.path}/comments`}>\r\n                <Comments />\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuoteDetail\r\n"],"sourceRoot":""}