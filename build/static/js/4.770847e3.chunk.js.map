{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","quotes","useRouteMatch","className","classes","item","text","author","to","path","id","QuoteList","ascending","location","useLocation","histroy","useHistory","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuotes","loadingQuotes","useState","loading","setLoaded","loaded","useCallback","status","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,gGCwBdC,EAtBG,SAACC,GAEjB,IAAMC,EAASC,cAGf,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIL,EAAMM,SAEZ,qCAAaN,EAAMO,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,UAAKP,EAAOQ,KAAZ,YAAoBT,EAAMU,IAAlD,iC,iBCyCSC,EAzCG,SAACX,GACjB,IAXkBC,EAAQW,EAWpBC,EAAWC,cACXC,EAAUC,cAIVC,EAAiD,QAHnC,IAAIC,gBAAgBL,EAASM,QAGVC,IAAI,QAQrCC,GAxBYpB,EAwBcD,EAAMC,OAxBZW,EAwBoBK,EAvBvChB,EAAOqB,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,GAAK,GAAK,MAqBxC,OAEE,eAAC,WAAD,WACE,qBAAKP,UAAWC,IAAQqB,QAAxB,SACE,yBAAQC,QAbe,WAC3BX,EAAQY,KAAK,CACXC,SAAUf,EAASe,SACnBT,OAAO,SAAD,OAAYF,EAAqB,OAAS,UAU9C,mBAA8CA,EAAqB,aAAe,iBAIpF,oBAAId,UAAWC,IAAQyB,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAEhB,cAAC,EAAD,CAEErB,GAAIqB,EAAMrB,GACVH,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMrB,a,yBC9BRsB,EAXO,WACpB,OACE,sBAAK7B,UAAWC,IAAQ6B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAMzB,GAAG,aAAaL,UAAU,MAAhC,6BC+CS+B,UAlDG,SAAClC,GAEf,IAiBImC,EAjBJ,EAA6BC,oBAAS,GAAtC,mBAAOC,EAAP,KAAgBC,EAAhB,KAEMC,EAASC,uBAAY,WAGF,cAAjBxC,EAAMyC,QACNH,GAAU,KAEf,CAACtC,EAAMyC,SAYV,OARAC,qBAAU,WAENH,MACD,CAACvC,EAAMyC,OAAQF,IAKG,YAAjBvC,EAAMyC,OACNN,EACI,8BACI,cAACQ,EAAA,EAAD,MAMS,UAAjB3C,EAAMyC,OACE,mBAAGtC,UAAU,mBAAb,mBAIPH,EAAMC,QAAkC,IAAxBD,EAAMC,OAAO2C,OAO9B,gCACKT,EACAE,GAAW,cAAC,EAAD,CAAYpC,OAAQD,EAAMC,YARnC,cAAC,EAAD","file":"static/js/4.770847e3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2dOvb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__3pzcl\",\"sorting\":\"QuoteList_sorting__rL6H1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","import classes from './QuoteItem.module.css';\nimport {Link, useRouteMatch} from 'react-router-dom';\n\nconst QuoteItem = (props) => {\n\n  const quotes = useRouteMatch()\n  // console.log(\"quotesItem\", quotes)\n  // console.log(\"quotesItemiD\", props.id)\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className='btn' to={`${quotes.path}/${props.id}`}>\n\n        View Fullscreen\n \n      </Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom'\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n};\n\nconst QuoteList = (props) => {\n  const location = useLocation()\n  const histroy = useHistory()\n  const queryParams = new URLSearchParams(location.search)\n\n\n  const isSortingAscending = queryParams.get('sort') === 'asc'\n  const changeSortingHandler = () => {\n    histroy.push({\n      pathname: location.pathname,\n      search: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n    })\n  }\n\n  const sortedQuotes = sortQuotes(props.quotes, isSortingAscending)\n\n  return (\n\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortingHandler}> Sort {isSortingAscending ? \"Descending\" : \"Ascending\"}</button>\n        {/* <button>Sort Descending</button> */}\n      </div>\n\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n\n\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import classes from './NoQuotesFound.module.css';\nimport {Link} from 'react-router-dom'\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link to=\"/add-quote\" className='btn'>\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import React, { useState, useEffect, useCallback } from 'react'\r\nimport QuotesList from \"../components/quotes/QuoteList\"\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\r\nconst AllQuotes = (props) => {\r\n\r\n    const [loading, setLoaded] = useState(false)\r\n\r\n    const loaded = useCallback(() => {\r\n\r\n        \r\n        if (props.status === \"completed\") {\r\n            setLoaded(true)\r\n        }\r\n    }, [props.status])\r\n\r\n  \r\n\r\n    useEffect(() => {\r\n   \r\n        loaded()\r\n    }, [props.status, loaded])\r\n\r\n    let loadingQuotes\r\n\r\n    \r\n    if (props.status === \"pending\") {\r\n        loadingQuotes= (\r\n            <div>\r\n                <LoadingSpinner/>\r\n            </div>\r\n        )\r\n        return loadingQuotes\r\n    }\r\n\r\n    if (props.status === \"error\") {\r\n        return  <p className=\"centered focused\">\r\n            Error\r\n        </p>\r\n    }\r\n    if (!props.quotes || props.quotes.length === 0) {\r\n        return <NoQuotesFound/>\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            {loadingQuotes}\r\n            {loading && <QuotesList quotes={props.quotes} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllQuotes\r\n"],"sourceRoot":""}